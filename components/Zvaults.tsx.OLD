import React, { useEffect, useState, CSSProperties } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useOverview } from "./contextOverview"; // Adjust the path as necessary

import {
  faArrowUp,
  faArrowDown,
} from "@fortawesome/free-solid-svg-icons";
// import { GetChainName } from "../utils/getChain";
// import { TierColors } from "../constants/constants";
import { GetVaultTvl } from "../utils/getVaultTvl";
import { NumberWithCommas } from "../utils/tokenMaths";
import Image from "next/image";
import { useRouter } from "next/router";
import { CONFIG } from "../constants/config";
import VaultModal from "./vaultModal.tsx.OLD";
import Link from "next/link";

interface Vault {
  tvl: number;
  icon: string;
  vault: string;
  value: number;
  symbol: string;
  name: string;
  decimals: number;
}
interface VaultProps {
  chainProp: string | undefined;
  setVaultTvl: React.Dispatch<React.SetStateAction<Vault | undefined>>;
  refreshTickets: number;
  modal: boolean;
  // overview: any;
}

const Vaults: React.FC<VaultProps> = ({
  chainProp,
  setVaultTvl,
  refreshTickets,
  modal,
  // overview,
}) => {
  const overview = useOverview();
  const router = useRouter();
  // console.log("overview??",overview)

  const handleDivClick = (address: string) => {
    router.push(`/vault?chain=${CONFIG.CHAINID}&address=${address}`);
  };

  const [vaults, setVaults] = useState<Vault[]>([]);
  const [vaultStartIndex, setVaultStartIndex] = useState(0);
  const [maxCards, setMaxCards] = useState(3); // Maximum number of cards to display
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalAddress, setModalAddress] = useState("");

  if (modal && router.isReady) {
    setModalAddress(router.query.address as any);
    setIsModalOpen(true);
  }
  // Function to open the modal
  const openModal = (address: any) => {
    setModalAddress(address);
    setIsModalOpen(true);
  };

  // Function to close the modal
  const closeModal = () => {
    setIsModalOpen(false);
  };

  const handlePrevious = () => {
    if (vaultStartIndex > 0) {
      setVaultStartIndex(vaultStartIndex - 1);
    }
  };

  const handleNext = () => {
    if (vaultStartIndex < vaults.length - maxCards) {
      setVaultStartIndex(vaultStartIndex + 1);
    }
  };

  useEffect(() => {
    const fetchVaults = async () => {
      const tvl = await GetVaultTvl(Number(chainProp));
      // console.log("tvl",tvl)
      tvl.sort((a, b) => b.value - a.value);
      console.log("vaults",tvl)
      setVaults(tvl);
      setVaultTvl(tvl as any);
    };

    fetchVaults();
  }, []);

  const totalTVL = vaults.reduce((sum, vault) => sum + vault.value, 0);

  useEffect(() => {
    const handleResize = () => {
      // Adjust the maximum number of cards based on the screen width
      if (window.innerWidth >= 768) {
        setMaxCards(4);
      } else {
        setMaxCards(3);
      }
    };

    // Call the handleResize function initially and on window resize
    handleResize();
    window.addEventListener("resize", handleResize);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [refreshTickets]);

  const totalVaults = vaults.length;
  //   const winsText = totalWins === 1 ? "YOUR WIN" : `YOUR ${totalWins} WINS`;

  return (
    <>
      <style jsx>{`
        .custom-link:hover {
          color: red;
        }
      `}</style>
      {/* <div style={styles.container}> */}
      {/* <div style={styles.whyPlay}>
           <FontAwesomeIcon
            icon={faBell}
            size="sm"
            style={{
              color: 'black',
              height: '17px',
              marginRight: '8px',
            }}
          /> */}
      {/* Aave protocol has been paused and resulted in a pause on DAI and USDC vaults. All funds are safe! <br></br>{" "}
          <a href="https://app.aave.com/governance/proposal/?proposalId=358" className="custom-link">
            {" "}
            <FontAwesomeIcon
              icon={faExternalLink}
              size="sm"
              style={{
                color: "black",
                height: "14px",
                marginLeft: "6px",
              }}
            />
          </a>
        </div> 
      </div>*/}
      {vaults.length > 0 && (
        <div className="app-container">
          <div className="box-header" style={{ width: "200px" }}>
            <Link href="vaults">
              <a className="custom-link">{CONFIG.CHAINNAME} VAULTS</a>
            </Link>
          </div>
          <div style={styles.contentContainer}>
            <div style={styles.vaultGrid}>
              <div style={styles.whyPlay}>
                <div style={styles.tvlRow}>
                  <div style={styles.tvlLabel}>TVL</div>
                  <div style={styles.tvlValue}>
                    ${NumberWithCommas(totalTVL.toFixed(0))}
                  </div>
                </div>
                {overview && (
                  <div style={styles.tvlRow}>
                    <div style={styles.tvlLabel}>Poolers</div>
                    <div style={styles.tvlValue}>{overview.poolers}</div>
                  </div>
                )}
              </div>

              {vaults
                .slice(vaultStartIndex, vaultStartIndex + maxCards)
                .map((vault: any, index) => (
                  <div
                    key={index}
                    style={styles.vaultCard}
                    className="hover-bgchange"
                    onClick={() => {
                      // router.push(
                      // `/vaults?chain=${CONFIG.CHAINID}&address=${vault.vault}`, undefined, { shallow: true });

                      openModal(vault.vault);
                    }}>
                    <div style={styles.symbol}>
                      <Image
                        src={vault?.icon || "/images/noIcon.svg"}
                        alt={vault?.symbol || ""}
                        height={22}
                        width={22}
                      />
                      &nbsp;{vault.symbol}&nbsp;
                      {(vault.symbol === "przUSDC" || vault.symbol ===  "przWETH" || vault.symbol === "przLUSD" || vault.symbol === "przDAI" || vault.symbol === "przPOOLWETH")  && (
                        <span className="bonus">+OP</span>
                      )}
                      {/* {GetChainName(vault.network)} DRAW&nbsp;{vault.draw} */}
                    </div>
                    <div style={styles.alignBottom}>
                      {vault.value > 0 &&
                      <>${NumberWithCommas(vault.value.toFixed(0))}</>}
                    </div>
                  </div>
                ))}
            </div>
            <div style={styles.arrowsContainer}>
              <div style={styles.arrowWrapper}>
                <FontAwesomeIcon
                  icon={faArrowUp}
                  size="lg"
                  style={
                    vaultStartIndex > 0
                      ? styles.arrowIcon
                      : styles.arrowIconHidden
                  }
                  onClick={handlePrevious}
                  className="arrowIcon"
                />
              </div>
              <div style={styles.arrowWrapper}>
                <FontAwesomeIcon
                  icon={faArrowDown}
                  size="lg"
                  style={
                    vaultStartIndex < vaults.length - maxCards
                      ? styles.arrowIcon
                      : styles.arrowIconHidden
                  }
                  onClick={handleNext}
                  className="arrowIcon"
                />
              </div>
            </div>
          </div>
          <Link href="vaults">
            <div className="more">
              <a className="custom-link">+ more</a>
            </div>
          </Link>
        </div>
      )}
      {/* Modal component */}
      <VaultModal
        vaultAddress={modalAddress}
        isOpen={isModalOpen}
        onClose={closeModal}
        vaultPropData={{}}
      />
    </>
  );
};

const styles: { [key: string]: CSSProperties } = {
  container: {
    marginTop: "10px",

    backgroundColor: "#b4ccd1",
    padding: "20px",
    borderRadius: "10px",
    width: "350px",
    display: "inline-block",
    ...({
      "@media (min-width: 768px)": {
        display: "inline-flex",
        minWidth: "400px",
      },
    } as Partial<CSSProperties>),
  },

  contentContainer: {
    display: "flex",
    alignItems: "center",
  },
  vaultGrid: {
    display: "grid",
    gridTemplateColumns: "1fr",
    gap: "10px",
    maxWidth: "300px",
    margin: "0 auto",
  },
  vaultCard: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: "#fff",
    padding: "10px",
    borderRadius: "8px",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
    width: "100%",
    minWidth: "280px",
  },
  symbol: {
    marginRight: "12px",
    display: "flex",
    alignItems: "center",
  },
  alignBottom: {
    display: "flex",
    alignItems: "center",
  },

  arrowsContainer: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "space-between",
    height: "100%",
  },
  arrowWrapper: {
    height: "26px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  },
  arrowIcon: {
    height: "16px",
    // marginTop: "5px",
    // marginBottom: "5px",
  },
  arrowIconHidden: {
    height: "16px",
    opacity: 0, // make it invisible
    pointerEvents: "none",
  },

  tvlLabel: {
    marginRight: "5px", // Space between label and value
  },

  whyPlay: {
    display: "flex",
    flexDirection: "column",
    alignItems: "stretch", // This will make the child items fill the div
    justifyContent: "space-between",
    backgroundColor: "#e5f3f5",
    padding: "10px",
    borderRadius: "8px",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
    width: "100%",
    minWidth: "280px",
    // Rest of your styles...
  },

  tvlRow: {
    display: "flex",
    justifyContent: "space-between", // This will push the tvlValue to the right
    alignItems: "center",
    padding: "5px 0",
    // Rest of your styles...
  },

  tvlValue: {
    // Remove the marginLeft if present as it's not needed
    textAlign: "right", // Right align the text
    // No width or flex-grow is necessary
    // Rest of your styles...
  },
};

export default Vaults;
