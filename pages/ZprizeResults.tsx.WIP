import React, { useState, useEffect } from 'react';
import { ComposedChart, Line, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from 'recharts';

const MyChartComponent = () => {
    const [tierData, setTierData] = useState({});

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch('https://poolexplorer.xyz/10-prizeresults');
                const result = await response.json();
                processAndSetData(result);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        const processAndSetData = (data) => {
            let tiersProcessed = {};

            // Initialize tiers
            for (let draw of data) {
                Object.keys(draw.tiers).forEach(tier => {
                    if (!tiersProcessed[tier]) {
                        tiersProcessed[tier] = [];
                    }
                });
            }

            // Process data for each tier
            data.forEach(draw => {
                Object.keys(tiersProcessed).forEach(tier => {
                    const tierData = draw.tiers[tier] || { value: "0", totalWins: "1", totalClaims: "0" };
                    const value = parseFloat(tierData.value) / 1e18; // Convert Wei to Ether
                    const prizeSize = value / parseInt(tierData.totalWins, 10);
                    const claimedValue = prizeSize * parseInt(tierData.totalClaims, 10);

                    tiersProcessed[tier].push({
                        draw: draw.draw,
                        totalValue: parseFloat(value.toFixed(2)), // Format to two decimal places
                        claimedValue: parseFloat(claimedValue.toFixed(2)) // Format to two decimal places
                    });
                });
            });

            setTierData(tiersProcessed);
        };

        fetchData();
    }, []);

    return (
        <div>
            {Object.keys(tierData).map(tier => (
                <div key={tier}>
                    <h2>Tier {tier} Chart</h2>
                    <ComposedChart width={600} height={300} data={tierData[tier]}>
                        <XAxis dataKey="draw" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <CartesianGrid stroke="#f5f5f5" />
                        <Bar dataKey="claimedValue" barSize={20} fill="#413ea0" />
                        <Line type="monotone" dataKey="totalValue" stroke="#ff7300" />
                    </ComposedChart>
                </div>
            ))}
        </div>
    );
};

export default MyChartComponent;
